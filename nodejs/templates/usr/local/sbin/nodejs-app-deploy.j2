#!/bin/bash

export PATH=$PATH:/usr/local/bin
export PM2_HOME="{{ nodejs_data_dir }}"

USER="{{ nodejs_user }}"
GROUP="{{ nodejs_group }}"
APP_DIR="{{ nodejs_data_dir }}/apps"

APP_NAME=""
APP_FILE=""
APP_STARTUP="index.js"
MAX_INST=1

function syntax() {
    cat <<EOF
Script to deploy new Node.js application

Usage: ${0##*/} [-h|-n <app_name> -f <archive_file>][-s startup_script][-i <instances>]
    -h                  Display this message
    -n <app_name>       Application name
    -f <archive_file>   Archive file in tar.gz format
    -s <startup_script> Startup script to execute (default: index.js)
    -i <instances>      Number of instance to start (default: 1)
EOF
}

if [ "$UID" -ne 0 ]; then
    >&2
    echo "Script must be run with root privileges. Abording..."
    exit 1
fi

while getopts "hn:f:s:i:" OPT; do
    case $OPT in
        h)
            syntax
            exit 0
            ;;
        n)
            APP_NAME="${OPTARG}"
            ;;
        f)
            APP_FILE="${OPTARG}"
            ;;
        s)
            APP_STARTUP="${OPTARG}"
            ;;
        i)
            MAX_INST="${OPTARG}"
            ;;
        *)
            echo "Unknown option."
            syntax
            exit 1
            ;;
    esac
done


if [[ -z $APP_NAME ]] || [[ -z $APP_FILE ]]; then
    syntax
    exit 1
fi

if [ ! -r "$APP_FILE" ]; then
    echo "$APP_FILE: No such file or directory"
    exit 1
fi

if [ ! -d "${APP_DIR}/${APP_NAME}" ]; then
    echo "Application ${APP_NAME} not found in ${APP_DIR}"
    exit 1
fi

echo Delete ${APP_DIR}/${APP_NAME}/node_modules
rm -rf ${APP_DIR}/${APP_NAME}/node_modules

echo Uncompress ${APP_FILE} to ${APP_DIR}/${APP_NAME}

tar xzf ${APP_FILE} -C ${APP_DIR}/${APP_NAME}
chown -R ${USER}:${GROUP} ${APP_DIR}/${APP_NAME}
chmod -R g-w,o-rwx ${APP_DIR}/${APP_NAME}
cd ${APP_DIR}/${APP_NAME}
su ${USER} -c "npm rebuild"

pm2 show $APP_NAME > /dev/null 2>&1

if [ "$?" -eq 0 ]; then
    pm2 restart ${APP_NAME}
else
    cd ${APP_DIR}/${APP_NAME}
    if [ "$APP_STARTUP" == "npm" ]
    then
      pm2 start ${APP_STARTUP} --merge-logs --name ${APP_NAME} --time -- start
    else
      pm2 start ${APP_STARTUP} --merge-logs --name ${APP_NAME} --time
    fi
fi

if [ "$MAX_INST" == "0" -o "$MAX_INST" == "max" ]; then
    MAX_INST=$(nproc)
elif [ "$MAX_INST" == "-1" ]; then
    MAX_INST=$(nproc)
    ((MAX_INST--))
fi

echo "Scale ${APP_NAME} to ${MAX_INST}"
pm2 scale ${APP_NAME} ${MAX_INST}

echo " Reset app metadata, counter etc.... "
pm2 reset ${APP_NAME}

echo "Save pm2 app"
pm2 save
