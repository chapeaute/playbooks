---
# include per-environment variables
- name: Include per-environment variables
  include_vars: '{{ item }}'
  with_first_found:
    - files:
        - '{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml'           # CentOS-6.5
        - '{{ ansible_os_family }}-{{ ansible_distribution_version }}.yml'              # RedHat-6.5
        - '{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml'     # CentOS-6
        - '{{ ansible_os_family }}-{{ ansible_distribution_major_version }}.yml'        # RedHat-6
        - '{{ ansible_distribution }}.yml'                                              # CentOS
        - '{{ ansible_os_family }}.yml'                                                 # RedHat
        - 'main.yml'
      paths: '../vars'

- name: main | Ensure OpenSSL is installed
  package:
    name:  "{{ openssl_package }}"
    state: present

- name: main | Ensure ssl folder exist
  file:
    path: "{{ ssl_certs_path }}"
    state: directory
    owner: "{{ ssl_certs_path_owner }}"
    group: "{{ ssl_certs_path_group }}"
    mode: "{{ ssl_certs_mode }}"

- name: main | stat path={{ ssl_certs_local_privkey_path }}
  delegate_to: localhost
  stat:
    path: "{{ ssl_certs_local_privkey_path }}"
  register: stat_privkey
  become: no

- name: main | stat path={{ ssl_certs_local_cert_path }}
  delegate_to: localhost
  stat:
    path: "{{ ssl_certs_local_cert_path }}"
  register: stat_cert
  become: no

- name: main | Test if privkey file is needed
  fail: msg="Privkey file {{ ssl_certs_local_privkey_path }} is missing"
  when: not stat_privkey.stat.exists and stat_cert.stat.exists

- name: main | Test if cert file is needed
  fail: msg="Cert file {{ ssl_certs_local_cert_path }} is missing"
  when: stat_privkey.stat.exists and not stat_cert.stat.exists

- include: generate.yml
  when: >
    ( not stat_privkey.stat.exists and not stat_cert.stat.exists )
    and ( ssl_certs_local_privkey_data is undefined and ssl_certs_local_cert_data is undefined )

- name: main | Copy SSL certificates
  copy:
    src:   "{{ item.src }}"
    dest:  "{{ item.dest }}"
    owner: "{{ ssl_certs_path_owner }}"
    group: "{{ ssl_certs_path_group }}"
    mode:  "{{ ssl_certs_mode }}"
  when: >
    ( stat_privkey.stat.exists and stat_cert.stat.exists )
    and ( ssl_certs_local_privkey_data is undefined and ssl_certs_local_cert_data is undefined )
  with_items:
    - src:  "{{ ssl_certs_local_cert_path }}"
      dest: "{{ ssl_certs_cert_path }}"
    - src:  "{{ ssl_certs_local_privkey_path }}"
      dest: "{{ ssl_certs_privkey_path }}"

- name: main | Copy SSL certificate data
  copy:
    content: "{{ item.content }}"
    dest:    "{{ item.dest }}"
    owner:   "{{ ssl_certs_path_owner }}"
    group:   "{{ ssl_certs_path_group }}"
    mode:    "{{ ssl_certs_mode }}"
  when: ssl_certs_local_privkey_data is defined and ssl_certs_local_cert_data is defined
  with_items:
    - content: "{{ ssl_certs_local_cert_data|default }}"
      dest:    "{{ ssl_certs_cert_path }}"
    - content: "{{ ssl_certs_local_privkey_data|default }}"
      dest:    "{{ ssl_certs_privkey_path }}"
  no_log: true

- name: main | Generate strong DHE parameter - https://weakdh.org/
  command: "openssl dhparam -out {{ ssl_certs_dhparam_path }} {{ ssl_certs_dhparam_size }}"
  args:
    creates: "{{ ssl_certs_dhparam_path }}"
  when: ssl_certs_generate_dh_param

