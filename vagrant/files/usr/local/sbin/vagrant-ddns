#!/bin/bash
# set -e

function _return {
  echo "$_return"
  _return=''
}

function _exit {
  echo $2
  exit $1
}

function nsupdate_server {
  _return="server $1\n"
}

function nsupdate_add {
  _return="update add $1 14440 A $2\n"
}

function nsupdate_add_rev {
  _return="update add $1 14440 PTR $2\n"
}

function nsupdate_delete {
  _return="update delete $1\n"
}

function nsupdate_send {
  _return="send\n"
}

# Parse arguments
dnsserver=127.0.0.1
while getopts ":a:s:i:h:k:" opt; do
  case $opt in
    a)
      # add, delete, dryadd, drydelete
      action=$OPTARG
      ;;
    s)
      # DNS server hostname or address
      dnsserver=$OPTARG
      ;;
    h)
      # guest machine hostname
      hostname=$OPTARG
      ;;
    i)
      # guest machine ip
      ip=$OPTARG
      ;;
    k)
      # nsupdate key file for DDNS updates
      nsupdatekey=$OPTARG
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

ip_rev=$(echo $ip | sed -r 's/([0-9]{1,3}).([0-9]{1,3}).([0-9]{1,3}).([0-9]{1,3})/\4.\3.\2.\1/')

# Sanity check vars
# Currently supported actions are add, delete, dryadd, drydelete
if [ "$action" != "add" ] && [ "$action" != "delete" ] && [ "$action" != "dryadd" ] && [ "$action" != "drydelete" ]; then
  _exit 1 "Invalid action, valid actions are: add, delete, dryadd, drydelete"
fi
# If action is add or dryadd we need an ip in order to determine IP address
if ([ "$action" = "add" ] || [ "$action" = "dryadd" ]) && [ -z "$ip" ]; then
  _exit 1 "IP address must be provided for $action"
fi

# Build nsupdate command
cmd_stack=""
# Always specify DNS server for sanity
cmd_stack+=$(nsupdate_server "$dnsserver" && _return)
if [ "$action" = "add" ] || [ "$action" = "dryadd" ]; then
  cmd_stack+=$(nsupdate_add $hostname $ip && _return)
  cmd_stack+=$(nsupdate_send && _return)
  cmd_stack+=$(nsupdate_add_rev ${ip_rev}.in-addr.arpa ${hostname}. && _return)
elif [ "$action" = "delete" ] || [ "$action" = "drydelete" ]; then
  cmd_stack+=$(nsupdate_delete "$hostname" && _return)
  cmd_stack+=$(nsupdate_send && _return)
  cmd_stack+=$(nsupdate_delete ${ip_rev}.in-addr.arpa && _return)
fi
# Always append send at the end
cmd_stack+=$(nsupdate_send && _return)
#echo $cmd_stack

# Do the nsupdate if this is not a dryrun
if [ "$action" = "add" ] || [ "$action" = "delete" ]; then
  echo -e "${cmd_stack}" | nsupdate -v -k $nsupdatekey 2>&1
elif [ "$action" = "dryadd" ] || [ "$action" = "drydelete" ]; then
  echo "Dry-run command: echo -e ${cmd_stack} | nsupdate -v -k $nsupdatekey" 2>&1
fi
