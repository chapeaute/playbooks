#!/usr/bin/env python
import json
import os
import argparse

def load_file(file):
    opennedfile = open(file,'r')
    file_data = json.load(opennedfile)
    opennedfile.close()
    return file_data

def create_dir(dirname,kbn_type):
    try:
        os.mkdir(dirname)
        print('{} was created'.format(dirname))
    except:
        pass
    try:
        os.makedirs(dirname + "/" + kbn_type)
        print('{} was created'.format(dirname + "/" + kbn_type))
    except:
        pass

def sort_type(dirname,data):
    for i in data:
        create_dir(dirname,i['_type'])
        newfile = open(dirname + '/' + i['_type'] + '/' + i['_id'] + '.json','w')
        json.dump(i["_source"],newfile)
        newfile.close()

def sort_type_by_id(dirname,data,dashboard_id):
    list_visualize = []
    list_search = []
    for i in data:
        if i['_id'] == dashboard_id and i['_type'] == 'dashboard':
            create_dir(dirname,i['_type'])
            newfile = open(dirname + '/' + i['_type'] + '/' + i['_id'] + '.json','w')
            json.dump(i["_source"],newfile)
            newfile.close()
            panels = json.loads(i['_source']['panelsJSON'])
            for l in panels:
                if l['type'] == "visualization":
                    list_visualize.append(l['id'])
                if l['type'] == "search":
                    list_search.append(l['id'])

        if i['_id'] in list_visualize:
            create_dir(dirname,i['_type'])
            newfile = open(dirname + '/' + i['_type'] + '/' + i['_id'] + '.json','w')
            json.dump(i["_source"],newfile)
            newfile.close()

        if i['_id'] in list_search:
            create_dir(dirname,i['_type'])
            newfile = open(dirname + '/' + i['_type'] + '/' + i['_id'] + '.json','w')
            json.dump(i["_source"],newfile)
            newfile.close()

def main():
    parser = argparse.ArgumentParser(description="Split Kibana export into multiple files")
    parser.add_argument('file')
    parser.add_argument('name')
    parser.add_argument('--dashboard')
    args = parser.parse_args()

    loaded_data = load_file(args.file)
    if not args.dashboard:
        sort_type(args.name,loaded_data)

    if args.dashboard:
        print("Export dashboard {}".format(args.dashboard))
        sort_type_by_id(args.name,loaded_data,args.dashboard)


if __name__ == "__main__":
    main()

