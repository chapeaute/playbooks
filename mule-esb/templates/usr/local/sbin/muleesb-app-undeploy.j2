#!/bin/bash

APP_DIR="{{ mule_esb_default_root_dir }}/{{ mule_esb_service_name }}/apps"
SERVICE_NAME="{{ mule_esb_service_name }}"

APP_NAME=""

function syntax() {
    cat <<EOF
Script to undeploy existing Mule ESB application

Usage: ${0##*/} [-h|-n <app_name>]
    -h                Display this message
    -n <app_name>     Application name
EOF
}

if [ "$UID" -ne 0 ]; then
    >&2
    echo "Script must be run with root privileges. Abording..."
    exit 1
fi

while getopts "hn:" OPT; do
    case $OPT in
        h)
            syntax
            exit 0
            ;;
        n)
            APP_NAME="${OPTARG}"
            ;;
        *)
            echo "Unknown option."
            syntax
            exit 1
            ;;
    esac
done


if [[ -z $APP_NAME ]]; then
    syntax
    exit 1
fi

if [ ! -d "${APP_DIR}" ]; then
    echo "Application directory ${APP_DIR} not found."
    exit 1
fi

mule_env=$(systemctl show $SERVICE_NAME | grep '^ExecStart=' | sed -e 's/.*-M-Dmule.env=\([^ ]*\) .*/\1/')
mule_prop_file="${APP_DIR}/${APP_NAME}/classes/${mule_env}.properties"

if [ -f $mule_prop_file ]; then
    port=$(egrep "http.api.front.port=|http.api.port=" $mule_prop_file | cut -d= -f2 | tr -d '\r')
    if [ -z $port ]; then
      echo "Port not found for application $APP_NAME"
    else
	echo "Disable port $port on firewall"
        firewall-cmd -q --remove-port=${port}/tcp --permanent
        firewall-cmd -q --reload
    fi
fi

if [ ! -f ${APP_DIR}/${APP_NAME}-anchor.txt ]; then
  rm -rf ${APP_DIR}/${APP_NAME}
else
  rm -f ${APP_DIR}/${APP_NAME}-anchor.txt
fi

echo -n "Waiting while removing application"

while [ -d ${APP_DIR}/${APP_NAME} ]
do
    echo -n "."
    sleep 1
done

echo -n "Removing application logs"
rm -f {{ mule_esb_logs_dir }}/${APP_NAME}.log*

echo done
