---
- set_fact:
    redis_bind_interface: ["{{ ansible_default_ipv4.interface }}"]
  when: redis_bind_interface|length == 0

- name: cluster | Check if cluster is already configure
  shell: "redis-cli -p {{ redis_sentinel_port }} sentinel get-master-addr-by-name {{ redis_sentinel_cluster_name }} > /dev/null 2>&1 && echo configure || echo unconfigure"
  register:     cluster_master
  check_mode:   no
  changed_when: False

- name: cluster | Open firewall ports
  firewalld:
    port: "{{ item }}/tcp"
    permanent: true
    immediate: yes
    state: enabled
  with_items:
    - "{{ redis_sentinel_port }}"
  when:
    - inventory_hostname in redis_sentinel_hosts
    - manage_firewalld

- name: cluster | Configure redis sentinel
  tags: config_cluster
  lineinfile:
    dest:   "{{ redis_sentinel_config_file }}"
    regexp: "^{{ item.key }} .*"
    line:   "{{ item.key }} {{ item.value }}"
    insertbefore: "{{ item.before|default(omit) }}"
    insertafter: "{{ item.after|default(omit) }}"
  with_items:
    - key:   "sentinel down-after-milliseconds"
      value: "{{ redis_sentinel_cluster_name }} {{ redis_sentinel_down_afterms }}"
    - key:   "sentinel failover-timeout"
      value: "{{ redis_sentinel_cluster_name }} {{ redis_sentinel_failover_timeout }}"
    - key:   "sentinel parallel-syncs"
      value: "{{ redis_sentinel_cluster_name }} 1"
    - key:   "protected-mode"
      value: "no"
  when:
    - inventory_hostname in redis_sentinel_hosts
    - "'unconfigure' in cluster_master.stdout"
  notify:
    - Restart Redis Sentinel

- name: cluster | Configure redis sentinel if password is defined
  tags: config_cluster
  lineinfile:
    dest:   "{{ redis_sentinel_config_file }}"
    regexp: "^{{ item.key }} .*"
    line:   "{{ item.key }} {{ item.value }}"
    insertbefore: "{{ item.before|default(omit) }}"
    insertafter: "{{ item.after|default(omit) }}"
  with_items:
    - key:   "sentinel auth-pass"
      value: "{{redis_sentinel_cluster_name}} {{ redis_password }}"
      after: '^# Generated by'
  when:
    - inventory_hostname in redis_sentinel_hosts
    - "'unconfigure' in cluster_master.stdout"
    - redis_enable_password
  notify:
    - Restart Redis Sentinel

- name: cluster | Configure redis node to be slave of {{ redis_hosts[0] }}
  lineinfile:
    dest:   "{{ redis_config_file }}"
    regexp: "^{{ item.key }} .*"
    line:   "{{ item.key }} {{ item.value }}"
  with_items:
    - key:   "slaveof"
      value: "{{ hostvars[redis_hosts[0]]['ansible_'+redis_bind_interface[0]]['ipv4']['address'] }} {{ redis_setting_port }}"
    - key:   "slave-priority"
      value: "{{ redis_slave_priority }}"
  when:
    - inventory_hostname != redis_hosts[0]
    - inventory_hostname in redis_hosts
    - "'unconfigure' in cluster_master.stdout"
  notify:
    - Restart Redis

- name: cluster | Configure redis sentinel to be slave of {{ redis_hosts[0] }}
  lineinfile:
    dest:   "{{ redis_sentinel_config_file }}"
    regexp: "^{{ item.key }} .*"
    line:   "{{ item.key }} {{ item.value }}"
  with_items:
    - key:   "sentinel monitor"
      value: "{{ redis_sentinel_cluster_name }} {{ hostvars[redis_hosts[0]]['ansible_'+redis_bind_interface[0]]['ipv4']['address'] }} {{ redis_setting_port }} {{ ((redis_sentinel_hosts | length) / 2 + 1)|int }}"
  when:
    - inventory_hostname in redis_sentinel_hosts
    - "'unconfigure' in cluster_master.stdout"
  notify:
    - Restart Redis Sentinel

