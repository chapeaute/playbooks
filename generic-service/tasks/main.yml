---
# Include per-environment variables
- name: main | include vars
  include_vars: '{{ item }}'
  tags: always
  with_first_found:
    - files:
        - '{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml'           # CentOS-6.5
        - '{{ ansible_os_family }}-{{ ansible_distribution_version }}.yml'              # RedHat-6.5
        - '{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml'     # CentOS-6
        - '{{ ansible_os_family }}-{{ ansible_distribution_major_version }}.yml'        # RedHat-6
        - '{{ ansible_distribution }}.yml'                                              # CentOS
        - '{{ ansible_os_family }}.yml'                                                 # RedHat
        - 'main.yml'
      paths: '../vars'

- include: "{{ ansible_os_family }}.yml"
  tags: always

- name: main | Install extract utils
  package:
    name:  unzip
    state: installed

- name: main | Install dependancies (APT)
  apt:
    name:  "{{ item }}"
    state: installed
    update_cache: yes
    cache_valid_time: 28800
  when: ansible_os_family == "Debian"
  with_items: "{{ genericservice.needed_packages|default([]) }}"

- name: main | Install dependancies (Yum)
  yum:
    name:  "{{ item }}"
    state: installed
  when: ansible_os_family == "RedHat"
  with_items: "{{ genericservice.needed_packages|default([]) }}"

- name: main | Create groups
  group:
    state:  present
    system: yes
    name:   "{{ genericservice.system_groupname|default(genericservice.name) }}"

- name: main | Create service user
  user:
    state:       present
    system:      yes
    group:       "{{ genericservice.system_groupname |default(genericservice.name) }}"
    name:        "{{ genericservice.system_username |default(genericservice.name) }}"
    home:        "{{ genericservice.system_home | default(genericservice_root + '/' + genericservice.name) }}"
    createhome:  "{{ genericservice.create_home | default(false) }}"

- name: main | Download source files
  get_url:
    url:            "{{ genericservice.source_url }}"
    dest:           "{{ genericservice_root }}/{{ genericservice.source_filename|default(genericservice.source_url|basename) }}"
    sha256sum:      "{{ genericservice.source_sha256sum |default(omit) }}"
    checksum:       "{{ genericservice.source_checksum |default(omit) }}"
    tmp_dest:       "{{ genericservice.tmp_dest | default('/tmp') }}"
    validate_certs: False
  when:
    - genericservice.source_url is defined
    - genericservice.source_url is not none
  register: dlfile
  check_mode: no

- name: main | Unpack source files (directly)
  unarchive:
    remote_src: no
    src:     "{{ genericservice.source_file }}"
    dest:    "{{ genericservice_root }}"
    creates: "{{ genericservice_root }}/{{ genericservice.subpath }}"
    extra_opts: "{{ genericservice.unarchive_opts | default(omit) }}"
  when:
    - genericservice.source_file is defined
    - genericservice.source_file is not none
  register: unpacked1

- name: main | Unpack source files (from remote server)
  tags: unarchive
  unarchive:
    remote_src: yes
    src:     "{{ genericservice_root }}/{{ genericservice.source_filename|default(genericservice.source_url|basename) }}"
    dest:    "{{ genericservice_root }}"
    creates: "{{ genericservice_root }}/{{ genericservice.subpath }}"
  when:
    - genericservice.source_url is defined and genericservice.source_url is not none
    - dlfile is changed
    - genericservice.deploy_method is not defined or (genericservice.deploy_method is defined and  genericservice.deploy_method != "checksum")
  register: unpacked2

- name: main | Get source files checksum if deploy method is based on checksum
  stat:
    path: "{{ genericservice_root }}/{{ genericservice.source_filename|default(genericservice.source_url|basename) }}"
    checksum_algorithm: sha1
  register: archive_stat
  when:
    - genericservice.deploy_method is defined and genericservice.deploy_method == "checksum"

- name: main | Create release directory
  file:
    path:  "{{ genericservice_root }}/{{ genericservice.name }}-releases"
    state: directory
  when:
    - genericservice.deploy_method is defined and genericservice.deploy_method == "checksum"

- name: main | Unpack source files (from remote server) if deploy method is based on checksum
  tags: unarchive
  unarchive:
    remote_src: yes
    src:     "{{ genericservice_root }}/{{ genericservice.source_filename|default(genericservice.source_url|basename) }}"
    dest:    "{{ genericservice_root }}/{{ genericservice.name }}-releases"
    creates: "{{ genericservice_root }}/{{ genericservice.name }}-releases/{{ genericservice.subpath }}-{{ archive_stat.stat.checksum }}"
    extra_opts: "{{ genericservice.unarchive_opts | default(omit) }}"
  when:
    - genericservice.source_url is defined and genericservice.source_url is not none
    - dlfile is changed
    - genericservice.deploy_method is defined and genericservice.deploy_method == "checksum"
  register: unpacked2
  notify: Rename source directory by appending checksum



- name: main | Create generic link to service directory
  file:
    src:   "{{ genericservice_root }}/{{ genericservice.subpath }}"
    dest:  "{{ genericservice_root }}/{{ genericservice.name }}"
    state: link
  when:
    - genericservice.deploy_method is not defined or (genericservice.deploy_method is defined and  genericservice.deploy_method != "checksum")

- name: main | Create generic link to service directory if deploy method is based on checksum
  file:
    src:   "{{ genericservice_root }}/{{ genericservice.name }}-releases/{{ genericservice.subpath }}-{{ archive_stat.stat.checksum }}"
    dest:  "{{ genericservice_root }}/{{ genericservice.name }}"
    state: link
  when:
    - genericservice.deploy_method is defined and genericservice.deploy_method == "checksum"

- name: main | Set permissions
  file:
    path:    "{{ genericservice_root }}/{{ genericservice.name }}/{{ item }}"
    owner:   "{{ genericservice.system_username|default(genericservice.name) }}"
    group:   "{{ genericservice.system_groupname|default(genericservice.name) }}"
    recurse: yes
    state:   directory
  with_items: "{{ genericservice.chowned_dirs }}"
  when: genericservice.chowned_dirs is defined

- name: main | Set executions permissions to start and stop command
  file:
    path: "{{ genericservice_root }}/{{ genericservice.name }}/{{ item }}"
    mode: "u+rwx,g+rx"
  with_items:
    - "{{ genericservice.start_command.split(' ')[0] }}"
    - "{{ genericservice.stop_command.split(' ')[0] }}"
  when:
    - genericservice.start_command is defined
    - genericservice.stop_command is defined
    - genericservice.create_service|default(True)

- name: main | Setup logrotate file
  template:
    src:  logrotate.j2
    dest: /etc/logrotate.d/{{ genericservice.name }}
  when: genericservice.log_glob is defined

- include: service.yml
  tags: config_service
